#
# Checking the conversions with older 0.0.x modules
#

use v6.d;
use Test;
use lib '../version-old/lib';
use lib 'lib';
use Date::Calendar::Strftime:ver<0.1.0>;
use Date::Calendar::Hebrew;
use Date::Calendar::Gregorian;
use Date::Calendar::Julian;

my @data = ( (2024, 11, 12, daylight,       'he',  "Yom Shlishi 11 Hes 5785" , "Tue 12 Nov 2024 ☼", "no problem")
            ,(2024, 11, 12, after-sunset,   'he',  "Yom Shlishi 11 Hes 5785" , "Tue 12 Nov 2024 ☼", "wrong intermediate date")
            ,(2024, 11, 13, before-sunrise, 'he',  "Yom Reviʻi 12 Hes 5785"  , "Wed 13 Nov 2024 ☼", "shift to daylight")
            ,(2024, 11, 13, daylight,       'he',  "Yom Reviʻi 12 Hes 5785"  , "Wed 13 Nov 2024 ☼", "no problem")
            ,(2024, 11, 13, after-sunset,   'he',  "Yom Reviʻi 12 Hes 5785"  , "Wed 13 Nov 2024 ☼", "wrong intermediate date")
            ,(2024, 11, 14, before-sunrise, 'he',  "Yom Chamishi 13 Hes 5785", "Thu 14 Nov 2024 ☼", "shift to daylight")
            ,(2024, 11, 13, before-sunrise, 'jl',  "Wednesday 31 Oct 2024"   , "Wed 13 Nov 2024 ☼", "shift to daylight")
            ,(2024, 11, 13, daylight,       'jl',  "Wednesday 31 Oct 2024"   , "Wed 13 Nov 2024 ☼", "no problem")
            ,(2024, 11, 13, after-sunset,   'jl',  "Wednesday 31 Oct 2024"   , "Wed 13 Nov 2024 ☼", "shift to daylight")
            );

my %class =   gr => 'Date::Calendar::Gregorian'
            , he => 'Date::Calendar::Hebrew'
            , jl => 'Date::Calendar::Julian'
            ;

my %ver   =   gr => '0.1.0'
            , he => '0.0.4'
            , jl => '0.0.4'
            ;

plan 12 × @data.elems;

for (@data) -> $datum {
  my ($year, $month, $day, $daypart, $cal, $str2, $str3, $result) = $datum;
  my Date::Calendar::Gregorian $d1 .= new(year => $year, month => $month, day => $day, daypart => $daypart);

  # push-push
  my $d2 = $d1.to-date(%class{$cal});
  is($d2.strftime("%A %d %b %Y"), $str2, "testing push to $str2");
  is($d2.^ver, %ver{$cal});
  my $d3 = $d2.to-date(%class<gr>);
  is($d3.strftime("%a %d %b %Y %Ep"), $str3, "testing push-push to $str2 and $str3, $result");
  is($d3.^ver, %ver<gr>);

  # push-pull
  my Date::Calendar::Gregorian $d4 .= new-from-date($d2);
  is($d4.strftime("%a %d %b %Y %Ep"), $str3, "testing push-pull to $str2 and $str3, $result");
  is($d4.^ver, %ver<gr>);

  # pull-push
  my $d5 = ::(%class{$cal}).new-from-date($d1);
  is($d5.strftime("%A %d %b %Y"), $str2, "testing pull to $str2");
  is($d5.^ver, %ver{$cal});
  my $d6 = $d5.to-date(%class<gr>);
  is($d6.strftime("%a %d %b %Y %Ep"), $str3, "testing pull-push to $str2 and $str3, $result");
  is($d6.^ver, %ver<gr>);

  # pull-pull
  my Date::Calendar::Gregorian $d7 .= new-from-date($d5);
  is($d7.strftime("%a %d %b %Y %Ep"), $str3, "testing pull-pull to $str2 and $str3, $result");
  is($d7.^ver, %ver<gr>);
}

done-testing;
